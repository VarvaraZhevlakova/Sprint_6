{"name": "Тест оформления заказа на самокат", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test.test_order_scooter.TestOrderScooter object at 0x0000028562DEB890>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"f974ec4e-3eea-4ffe-9015-9baf60fcd410\")>, order_button_position = 'bottom', rental_period = 'четверо суток'\nscooter_color = 'black', expected_url = 'https://dzen.ru/?yredirect=true'\n\n    @pytest.mark.parametrize(\n        \"order_button_position, rental_period, scooter_color, expected_url\",\n        [\n            (\"bottom\", \"двое суток\", \"grey\", yandex_url),\n            (\"bottom\", \"четверо суток\", \"black\", yandex_url),\n            (\"top\", \"двое суток\", \"grey\", yandex_url),\n            (\"top\", \"четверо суток\", \"black\", yandex_url)\n        ]\n    )\n    @allure.title(\"Тест оформления заказа на самокат\")\n    @allure.description(\"Этот тест проверяет процесс оформления заказа на самокат и редирект на страницу Яндекса.\")\n    def test_order_scooter(self, driver, order_button_position, rental_period, scooter_color, expected_url):\n        with allure.step(\"Открыть базовый URL для самоката\"):\n            driver.get(base_url_scooter)\n    \n        main_page = MainPage(driver)\n    \n        with allure.step(\"Нажать на кнопку подтверждения cookies\"):\n            main_page.click_cookie_confirm_button()\n    \n        with allure.step(f\"Нажать на кнопку заказа на {order_button_position}\"):\n            if order_button_position == \"top\":\n                main_page.click_on_top_order_button()\n            else:\n                main_page.click_bottom_order_button()\n    \n        with allure.step(\"Заполнить форму заказа с данными пользователя\"):\n            main_page.send_to_input(main_page.locators.input_name)\n            main_page.send_lastname_to_input(main_page.locators.input_lastname)\n            main_page.send_address_to_input(main_page.locators.input_address)\n            main_page.send_number_to_input(main_page.locators.input_number)\n    \n        with allure.step(\"Выбрать случайную станцию метро и перейти к следующему шагу\"):\n            main_page.select_random_station()\n            main_page.click_next_button()\n    \n        with allure.step(\"Заполнить дату и период аренды\"):\n            main_page.send_date_to_input(main_page.locators.calendar_data)\n            main_page.select_rental_period(main_page.locators.rental_period_locator, rental_period)\n    \n        with allure.step(f\"Выбрать цвет самоката: {scooter_color}\"):\n            scooter_color_locator = (\n                main_page.locators.scooter_color_grey if scooter_color == \"grey\"\n                else main_page.locators.scooter_color_black\n            )\n            main_page.select_scooter_color(scooter_color_locator)\n    \n        with allure.step(\"Пропустить поле комментария и нажать кнопку 'Оформить заказ'\"):\n            main_page.skip_comment_field(main_page.locators.comment_field)\n            main_page.click_order_button()\n    \n        with allure.step(\"Подтвердить заказ\"):\n            main_page.click_confirm_yes_button()\n    \n        with allure.step(\"Проверить видимость окна успеха\"):\n            assert main_page.wait_visibility_of_element(\n                main_page.locators.success_modal), \"Окно с сообщением об успешном заказе не появилось.\"\n    \n        with allure.step(\"Нажать кнопку 'Посмотреть статус'\"):\n            main_page.click_view_status_button()\n    \n        with allure.step(\"Нажать на логотип для перехода на главную страницу и проверить URL\"):\n            main_page.click_logo()\n            main_page.verify_redirect_to_homepage()\n            assert driver.current_url == base_url_scooter, \"Переход на главную страницу не произошел.\"\n    \n        with allure.step(\"Нажать на логотип Яндекса и проверить редирект\"):\n            main_page.click_yandex_logo()\n>           main_page.verify_url_contains(yandex_url)\n\ntest\\test_order_scooter.py:77: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:125: in verify_url_contains\n    WebDriverWait(self.driver, 10).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"f974ec4e-3eea-4ffe-9015-9baf60fcd410\")>, method = <function url_contains.<locals>._predicate at 0x0000028563334860>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "Этот тест проверяет процесс оформления заказа на самокат и редирект на страницу Яндекса.", "steps": [{"name": "Открыть базовый URL для самоката", "status": "passed", "start": 1737972508528, "stop": 1737972514183}, {"name": "Нажать на кнопку подтверждения cookies", "status": "passed", "start": 1737972514185, "stop": 1737972514463}, {"name": "Нажать на кнопку заказа на bottom", "status": "passed", "start": 1737972514463, "stop": 1737972514727}, {"name": "Заполнить форму заказа с данными пользователя", "status": "passed", "start": 1737972514727, "stop": 1737972514997}, {"name": "Выбрать случайную станцию метро и перейти к следующему шагу", "status": "passed", "start": 1737972514997, "stop": 1737972515387}, {"name": "Заполнить дату и период аренды", "status": "passed", "start": 1737972515387, "stop": 1737972516601}, {"name": "Выбрать цвет самоката: black", "status": "passed", "start": 1737972516601, "stop": 1737972516822}, {"name": "Пропустить поле комментария и нажать кнопку 'Оформить заказ'", "status": "passed", "start": 1737972516822, "stop": 1737972517055}, {"name": "Подтвердить заказ", "status": "passed", "start": 1737972517055, "stop": 1737972517270}, {"name": "Проверить видимость окна успеха", "status": "passed", "start": 1737972517270, "stop": 1737972517283}, {"name": "Нажать кнопку 'Посмотреть статус'", "status": "passed", "start": 1737972517283, "stop": 1737972517507}, {"name": "Нажать на логотип для перехода на главную страницу и проверить URL", "status": "passed", "start": 1737972517507, "stop": 1737972517964}, {"name": "Нажать на логотип Яндекса и проверить редирект", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"D:\\autotest\\PycharmProjects\\Sprint_6\\test\\test_order_scooter.py\", line 77, in test_order_scooter\n    main_page.verify_url_contains(yandex_url)\n  File \"D:\\autotest\\PycharmProjects\\Sprint_6\\pages\\main_page.py\", line 125, in verify_url_contains\n    WebDriverWait(self.driver, 10).until(\n  File \"D:\\autotest\\PycharmProjects\\Sprint_6\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1737972517964, "stop": 1737972528105}], "parameters": [{"name": "order_button_position", "value": "'bottom'"}, {"name": "rental_period", "value": "'четверо суток'"}, {"name": "scooter_color", "value": "'black'"}, {"name": "expected_url", "value": "'https://dzen.ru/?yredirect=true'"}], "start": 1737972508528, "stop": 1737972528106, "uuid": "f0be92b0-ddeb-48c9-b130-8a61f1ce381d", "historyId": "fd29929cf828feb5653f4aaa4edcf272", "testCaseId": "19f16a673c1df05d11ec10e631db6dc2", "fullName": "test.test_order_scooter.TestOrderScooter#test_order_scooter", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_order_scooter"}, {"name": "subSuite", "value": "TestOrderScooter"}, {"name": "host", "value": "Barbie"}, {"name": "thread", "value": "8384-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_order_scooter"}]}