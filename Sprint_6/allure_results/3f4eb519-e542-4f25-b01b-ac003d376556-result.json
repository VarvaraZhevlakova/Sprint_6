{"name": "Проверяем редирект на Дзен после нажатия на лого Яндекса", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Failed to decode response from marionette", "trace": "self = <test.test_order_scooter.TestOrderScooter object at 0x0000017D7AFE63D0>\ndriver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"31d564e8-030d-44a9-bf76-a72df8ba6905\")>, order_button_position = 'bottom', rental_period = 'двое суток'\nscooter_color = 'grey', expected_url = 'https://dzen.ru/?yredirect=true'\n\n    @pytest.mark.parametrize(\n        \"order_button_position, rental_period, scooter_color, expected_url\",\n        [\n            (\"bottom\", \"двое суток\", \"grey\", yandex_url),\n            (\"bottom\", \"четверо суток\", \"black\", yandex_url),\n            (\"top\", \"двое суток\", \"grey\", yandex_url),\n            (\"top\", \"четверо суток\", \"black\", yandex_url)\n        ]\n    )\n    @allure.title('Проверяем редирект на Дзен после нажатия на лого Яндекса')\n    @allure.description('После успешного оформления заказа, нажимаем на лого \"Яндекса\" и проверяем редирект на страницу Дзен')\n    def test_redirect_to_yandex(self, driver, order_button_position, rental_period, scooter_color, expected_url):\n>       self.test_order_scooter_success(driver, order_button_position, rental_period, scooter_color)\n\ntest\\test_order_scooter.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest\\test_order_scooter.py:24: in test_order_scooter_success\n    main_page.click_cookie_confirm_button()\npage_objects\\main_page.py:52: in click_cookie_confirm_button\n    self.wait_visibility_of_element(self.locators.cookie_confirm_button)\npage_objects\\base_page.py:13: in wait_visibility_of_element\n    return WebDriverWait(self.driver, 10).until(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:156: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000017D7BB389D0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"Failed to decode response from marionette\",\"stacktrace\":\"\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Failed to decode response from marionette\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "description": "После успешного оформления заказа, нажимаем на лого \"Яндекса\" и проверяем редирект на страницу Дзен", "parameters": [{"name": "order_button_position", "value": "'bottom'"}, {"name": "rental_period", "value": "'двое суток'"}, {"name": "scooter_color", "value": "'grey'"}, {"name": "expected_url", "value": "'https://dzen.ru/?yredirect=true'"}], "start": 1738052307062, "stop": 1738052320780, "uuid": "d732dde5-3598-492a-954a-00968ece4093", "historyId": "172b5c880aa803d7884471620469e49e", "testCaseId": "008e67f367defb0cc83e003f1e56d578", "fullName": "test.test_order_scooter.TestOrderScooter#test_redirect_to_yandex", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_order_scooter"}, {"name": "subSuite", "value": "TestOrderScooter"}, {"name": "host", "value": "Barbie"}, {"name": "thread", "value": "10340-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_order_scooter"}]}